#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose
from turtlesim.srv import SetPen
from math import cos, sin, atan2, pi

dt = 0.1

class Tracker(Node):
    def __init__(self):
        super().__init__('tracker')
        
        self.target = self.declare_parameter("target", 'turtle1').value

        from time import sleep
        sleep(self.declare_parameter("wait", 1).value + 1)
        
        # no pen
        pen_srv = self.create_client(SetPen, 'set_pen')
        pen_srv.wait_for_service()
        no_pen = SetPen.Request(off = 1)
        res = pen_srv.call_async(no_pen)
        rclpy.spin_until_future_complete(self, res)
        
        # subscribers
        self.pose = None
        self.pose_sub = self.create_subscription(Pose, 'pose', self.get_pose, 10)
        
        self.target_pose = None
        self.target_sub = self.create_subscription(Pose, f'/{self.target}/pose', self.get_target_pose, 10)
        
        self.cmd = Twist()
        self.cmd_vel = self.create_publisher(Twist, 'cmd_vel', 10)        
        
        self.timer = self.create_timer(dt, self.compute_cmd)
        
    def get_pose(self, msg):
        self.pose = msg
        
        
    def get_target_pose(self, msg):
        self.target_pose = msg
        
    def compute_cmd(self):
        
        if self.pose is None or self.target_pose is None:
            return
        
        dx = self.target_pose.x - self.pose.x
        dy = self.target_pose.y - self.pose.y
        
        c,s = cos(self.pose.theta), sin(self.pose.theta)
        
        theta = atan2(dy,dx) - self.pose.theta
        theta = (theta+pi) % (2*pi) - pi
        
        self.cmd.linear.x = 2.5*(dx*c+dy*s-1.5)
        self.cmd.angular.z = 2.5 * theta
        
        self.cmd_vel.publish(self.cmd)
        
rclpy.init()
tracker = Tracker()

rclpy.spin(tracker)

# clean exit on Ctrl-C
tracker.destroy_node()
rclpy.shutdown()
